

        LinkedList<Integer> linkedList = new LinkedList<>();
        ListNode n1 = new ListNode(1);
        ListNode n2 = new ListNode(3);
        ListNode n3 = new ListNode(5);
        ListNode n4 = new ListNode(7);
        n1.next = n2;
        n2.next = n3;
        n3.next = n4;
        // traverse:

        ListNode cur = n1;
        while (cur != null) {
            if (cur.next != null) {
                System.out.print(cur.val + "->");
            } else {
                System.out.println(cur.val);
            }
            cur = cur.next;
        }
        
        // 1->3->5->7

        
        // delete a Node:
        n1.next = n3;
        cur = n1;
        while (cur != null) {
            if (cur.next != null) {
                System.out.print(cur.val + "->");
            } else {
                System.out.println(cur.val);
            }
            cur = cur.next;
        }
        
        1->5->7

        
        // insert a Node in between:
        ListNode newNode = new ListNode(4);
        newNode.next = n3;
        n1.next = newNode;
        cur = n1;
        while (cur != null) {
            if (cur.next != null) {
                System.out.print(cur.val + "->");
            } else {
                System.out.println(cur.val);
            }
            cur = cur.next;
        }
        
        1->4->5->7

        
        // insert a Node as a new head:
        ListNode newHead = new ListNode(2);
        newHead.next = n1;
        cur = newHead;
        while (cur != null) {
            if (cur.next != null) {
                System.out.print(cur.val + "->");
            } else {
                System.out.println(cur.val);
            }
            cur = cur.next;
        }
        
        2->1->4->5->7

        
        // to-do: find() & DRY
        

    
        
        
        
        
        
        
        
        
        