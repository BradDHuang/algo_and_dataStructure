// Java Basics

Differences between HashMap and Hashtable:
    1. Hashtable is synchronized, whereas HashMap is not. 
This makes HashMap better for non-threaded applications, as unsynchronized Objects typically perform better than synchronized ones.
    2. Hashtable does not allow null keys or values.  HashMap allows one null key and any number of null values.
    3. One of HashMap's subclasses is LinkedHashMap, 
so in the event that you'd want predictable iteration order (which is insertion order by default), 
you could easily swap out the HashMap for a LinkedHashMap. This wouldn't be as easy if you were using Hashtable.
Since synchronization is not an issue for you, I'd recommend HashMap. 
If synchronization becomes an issue, you may also look at ConcurrentHashMap.

在 -128 ~ 127 的Integer 值，并且以Integer x = value;的方式赋值的Integer 值
在进行 == 和equals 比较时，都会返回true，
因为Java里面对处在 -128 ~ 127 之间的Integer 值，用的是原生数据类型int，会在内存里供重用，
也就是说这之间的Integer 值进行 == 比较时只是进行int原生数据类型的数值比较，
而超出-128~127 的范围，进行 == 比较时是进行地址及数值比较。

Everything in a Java program not explicitly set to something by the programmer, is initialized to a zero value.
For references (anything that holds an object): null.
For int/short/byte/long: 0.
For float/double: 0.0
For boolean: false.
For char: the null character '\u0000' (whose decimal equivalent is 0).
